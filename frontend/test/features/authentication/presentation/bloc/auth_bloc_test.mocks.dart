// Mocks generated by Mockito 5.4.5 from annotations
// in frontend/test/features/authentication/presentation/bloc/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:frontend/features/authentication/domain/entities/user.dart'
    as _i6;
import 'package:frontend/features/authentication/domain/repositories/auth_repository.dart'
    as _i2;
import 'package:frontend/features/authentication/domain/usecases/login.dart'
    as _i4;
import 'package:frontend/features/authentication/domain/usecases/register.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LoginUC].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUC extends _i1.Mock implements _i4.LoginUC {
  MockLoginUC() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repo =>
      (super.noSuchMethod(
            Invocation.getter(#repo),
            returnValue: _FakeAuthRepository_0(this, Invocation.getter(#repo)),
          )
          as _i2.AuthRepository);

  @override
  _i5.Future<_i3.Either<String, _i6.User>> call(String? email, String? pw) =>
      (super.noSuchMethod(
            Invocation.method(#call, [email, pw]),
            returnValue: _i5.Future<_i3.Either<String, _i6.User>>.value(
              _FakeEither_1<String, _i6.User>(
                this,
                Invocation.method(#call, [email, pw]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<String, _i6.User>>);
}

/// A class which mocks [RegisterUC].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUC extends _i1.Mock implements _i7.RegisterUC {
  MockRegisterUC() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthRepository get repo =>
      (super.noSuchMethod(
            Invocation.getter(#repo),
            returnValue: _FakeAuthRepository_0(this, Invocation.getter(#repo)),
          )
          as _i2.AuthRepository);

  @override
  _i5.Future<_i3.Either<String, void>> call(
    String? name,
    String? email,
    String? pw,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [name, email, pw]),
            returnValue: _i5.Future<_i3.Either<String, void>>.value(
              _FakeEither_1<String, void>(
                this,
                Invocation.method(#call, [name, email, pw]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<String, void>>);
}
